module mapreduce;

import java.util.HashMap;

behavior MapReduceProblem {
  MapReduce kernel; // containing the number of mappers, shufflers and reducers, and map and reduce methods
  Map[] mapActors;
  Shuffle[] shuffleActors;
  Reduce[] reduceActors;

  // constructor for MapReduceProblem, need to modify for distributed computation
  public MapReduceProblem(MapReduce mr) {
    kernel = mr;
    mapActors = new Map[mr.nMappers()];
    System.out.print("Constructing Mappers: ");
    System.out.println(mr.nMappers());
    for (int i = 0; i < mapActors.length; ++i)
    {
      mapActors[i] = new Map(mr);
    }

    System.out.print("Constructing Shufflers: ");
    System.out.println(mr.nShufflers());
    shuffleActors = new Shuffle[mr.nShufflers()];
    for (int i = 0; i < shuffleActors.length; ++i) 
    {
      shuffleActors[i] = new Shuffle(mr,i); // change the constructor of the Shuffle behavior according to your own definition
    }

    System.out.print("Constructing Reducers: ");
    System.out.println(mr.nReducers());
    reduceActors = new Reduce[mr.nReducers()];
    for (int i = 0; i < reduceActors.length; ++i)
    {
      reduceActors[i] = new Reduce(mr);
    } 

  }

  Object[] theToken(Object[] obj)
  {
  	return obj;
  }

  Object[] shufflingHandle(Object[] rec)
  {
  	for(int i = 0; i<rec.length; i++)
  	{
  		standardOutput <- println(rec[i]);
  	}
  	return rec;
  }

  Object[] runMappers(Vector inputPairs)
  {
    System.out.println("Mapping...");
	join
    {
    //This needs to be changed to loop until there are no more
    //inputPairs left. Each time its given to a mapper, loop around to the next
    //one (if last given to 1, give to 2; if last given to last mapper, then give to first)
    	for(int i = 0; i < inputPairs.size(); ++i)
    	{
    		int whichActor = i % kernel.nMappers();
    		mapActors[whichActor] <- map((Pair) inputPairs.get(i));

    	}

    }@theToken(token)@currentContinuation;
  }

  Object[] runShufflersPhase1(Object[] tok)
  {
    System.out.println("Shuffling...");
    join
    {
      for(int i = 0; i < kernel.nShufflers(); ++i)
      { 
        // System.out.println(tok[i].get(0));
        shuffleActors[i] <- addPairs(tok);
      }   
    }@theToken(token)@currentContinuation;

  }

  void runReducers(Object[] tok)
  {
    System.out.println("Reducing...");
    HashMap toReducers = (HashMap) tok[0];
    Object[] keys = toReducers.keySet().toArray();

    join
    {
      for(int i = 0; i < keys.length; i++)
      {
        Pair p = new Pair(keys[i],toReducers.get(keys[i]));
        // System.out.println(p);

        int whichActor = i % kernel.nReducers();
        reduceActors[whichActor] <- reduce(p);
      }
    }@theToken(token)@currentContinuation;

  }

  void writeOutput(Object[] tok, String outputFilename)
  {
    System.out.println("Writing to output...");
    Vector vec = new Vector();
    for(int i = 0; i < tok.length; i++)
    {
      vec.add(tok[i]);
    }

    output(vec,outputFilename);

    // for(int i = 0; i < tok.length; i++)
    // {
    //   System.out.println(tok[i]);
    // }

  }

  void printToken(Object[] tok)
  {
  	for(int i  = 0; i < tok.length; i++)
  	{
  		System.out.println(((Vector) tok[i]).get(0));
  	}
  }

  void checkShufflers()
  {
  	// token x = shuffleActors[0] <- getAllPairs()@
  	// standardOutput <- println(x);
  }

  // TODO: define the framework with functions of the kernel, define the Shuffle behavior, and distribute work among mappers, shufflers and reducers 
  void runMapReduce(String inputFilename, String outputFilename) 
  {
    PairReader pr = new PairReader(inputFilename);
    Vector inputPairs = new Vector();
    Pair ret;
    int i = 0;
    while(true)
    {
      ret = pr.readPair();
      if (ret != null)
        inputPairs.add(ret);
      else
        break;

      i++;
    }

    runMappers(inputPairs)@
    runShufflersPhase1(token)@
    runReducers(token)@
    writeOutput(token, outputFilename);


  }

  // write a vector of pairs to the output file
  void output(Vector v, String outputFilename)
  {
    PairWriter pw = new PairWriter(outputFilename);
    for (int i = 0; i < v.size(); ++i) 
    {
      pw.writePair((Pair)v.get(i));
    }
    pw.close();
  }

  // sample usage for character counting kernel, change the kernel to word document frequency after implementing the framework
  void act(String[] args) {
  	System.out.println("Creating problem...");
    int m = Integer.parseInt(args[2]); // number of mappers
    int s = Integer.parseInt(args[3]); // number of shufflers
    int r = Integer.parseInt(args[4]); // number of reducers
    MapReduce cc = new CharCountMapReduce(m, s, r);
    MapReduceProblem charCount = new MapReduceProblem(cc);
    String inputFilename = args[0];
    String outputFilename = args[1];
    charCount <- runMapReduce(inputFilename, outputFilename);
  }
}

